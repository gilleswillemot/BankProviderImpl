group = 'be.abstraction.providers'
version = '0.0.1'

apply plugin: 'maven-publish'

/**
 * If you want to create the kotlin library (kotlin.js) => `gradlew build -Pjs`
 */
if (project.hasProperty('js')) {
    apply from: 'build-js.gradle'
} else {
    apply plugin: 'kotlin-multiplatform'

    kotlin {
        jvm()
        js()
        configure([macosX64("macos"), iosX64(), iosArm64()]) { // macos target might not be needed.
            def platform = name
            binaries {
                framework {
                    baseName = "BankProviderFramework" + platform
                    println 'framework ' + platform
                    // Exporting dependencies in frameworks
                    if (platform == 'macos') {
                        export "com.github.gilleswillemot:bankApp-core-macos:3.2.1"
                    } else if (platform == 'iosX64') {
                        export "com.github.gilleswillemot:bankApp-core-iosX64:3.2.1"
                    } else {
                        export "com.github.gilleswillemot:bankApp-core-iosArm64:3.2.1"
                    }
                }
            }
        }

        sourceSets {
            commonMain {
                // We add the source set origin, because we don't worked with a commonMain folder (we used main folder) and
                // otherwise the files in src/main/kotlin would not be compiled.
                kotlin.srcDir('src/main/kotlin') // 'src/main' could potentially be a better option.
                dependencies {
                    // dependency on another multi-platform library that consists of the interfaces to extend
                    implementation 'com.github.gilleswillemot:bankApp-core:3.2.1'
                    // Otherwise :bankprovidermodule:compileKotlinMetadata FAILED

                    // if this dependency is removed => 'Kotlin not configured' in BankProvider class.
                    implementation kotlin('stdlib-common')
                }
            }
            commonTest {
                // if we want to bundle the tests in a test folder: create folder 'test' in 'src' + kotlin.srcDir('src/test/kotlin')
                dependencies {
                    implementation kotlin('test-common')
                    implementation kotlin('test-annotations-common')

                }
            }
            nativeMain {
                dependsOn commonMain
            }
            configure([macosMain, iosX64Main, iosArm64Main]) {
                dependsOn nativeMain
                dependencies {
                    if (name == 'macosMain') {
                        api 'com.github.gilleswillemot:bankApp-core-macos:3.2.1'
                    } else if (name == 'iosX64Main') {
                        api 'com.github.gilleswillemot:bankApp-core-iosX64:3.2.1'
                    } else if (name == 'iosArm64Main') {
                        api 'com.github.gilleswillemot:bankApp-core-iosArm64:3.2.1'
                    }
                }
            }
            jsMain {
                dependencies {
                    // this is needed to compile kotlin code to js (e.g. listOf and it)
                    implementation kotlin('stdlib-js')
                    implementation 'com.github.gilleswillemot:bankApp-core-js:3.2.1'
                }
            }
            jvmMain {
                kotlin.srcDir('src/jvmMain')
                dependencies {
                    implementation 'com.github.gilleswillemot:bankApp-core-jvm:3.2.1'
                    implementation kotlin('stdlib-jdk8')

                    implementation "org.koin:koin-core:$koin_version"
                }
            }
            jvmTest {
                dependencies {
                    implementation kotlin('test-junit')
                }
            }
        }
    }
}